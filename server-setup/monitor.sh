#!/bin/bash

# StudX Monitoring Script - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
# –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ cron –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

set -e

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SERVER_URL="https://studx.ru"
ADMIN_EMAIL="admin@studx.ru"
TELEGRAM_BOT_TOKEN=""  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
TELEGRAM_CHAT_ID=""    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

# –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
CPU_THRESHOLD=80
MEM_THRESHOLD=85
DISK_THRESHOLD=90
RESPONSE_TIME_THRESHOLD=3  # —Å–µ–∫—É–Ω–¥—ã

# –¶–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
STATE_FILE="/var/log/studx-monitor.state"
ALERT_SENT_FILE="/var/log/studx-alert.sent"

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
send_alert() {
    local message="$1"
    local severity="$2"  # INFO, WARNING, CRITICAL
    
    echo "[$(date)] [$severity] $message" >> /var/log/studx-monitor.log
    
    # Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω postfix)
    if [ ! -z "$ADMIN_EMAIL" ]; then
        echo "$message" | mail -s "StudX Alert [$severity]" $ADMIN_EMAIL 2>/dev/null || true
    fi
    
    # Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if [ ! -z "$TELEGRAM_BOT_TOKEN" ] && [ ! -z "$TELEGRAM_CHAT_ID" ]; then
        curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="üö® StudX [$severity]: $message" \
            >/dev/null 2>&1 || true
    fi
}

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
echo -e "${YELLOW}‚Üí –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞...${NC}"
HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 5 $SERVER_URL || echo "000")
RESPONSE_TIME=$(curl -s -o /dev/null -w "%{time_total}" --connect-timeout 5 $SERVER_URL || echo "999")

if [ "$HTTP_CODE" != "200" ] && [ "$HTTP_CODE" != "301" ] && [ "$HTTP_CODE" != "302" ]; then
    echo -e "${RED}‚úó –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! HTTP –∫–æ–¥: $HTTP_CODE${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ –∞–ª–µ—Ä—Ç
    if [ ! -f "$ALERT_SENT_FILE" ] || [ $(find "$ALERT_SENT_FILE" -mmin +15 2>/dev/null | wc -l) -gt 0 ]; then
        send_alert "–°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! HTTP –∫–æ–¥: $HTTP_CODE" "CRITICAL"
        touch "$ALERT_SENT_FILE"
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        echo -e "${YELLOW}‚Üí –ü—ã—Ç–∞—é—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã...${NC}"
        sudo systemctl restart nginx
        sudo pm2 restart studx-backend
        sleep 5
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        HTTP_CODE_RETRY=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 5 $SERVER_URL || echo "000")
        if [ "$HTTP_CODE_RETRY" == "200" ]; then
            send_alert "–°–∞–π—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞" "INFO"
            rm -f "$ALERT_SENT_FILE"
        fi
    fi
else
    echo -e "${GREEN}‚úì –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω (${RESPONSE_TIME}s)${NC}"
    rm -f "$ALERT_SENT_FILE" 2>/dev/null || true
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞
    if (( $(echo "$RESPONSE_TIME > $RESPONSE_TIME_THRESHOLD" | bc -l) )); then
        echo -e "${YELLOW}‚ö† –ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫: ${RESPONSE_TIME}s${NC}"
        send_alert "–ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫ —Å–∞–π—Ç–∞: ${RESPONSE_TIME}s" "WARNING"
    fi
fi

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
echo -e "${YELLOW}‚Üí –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–æ—Ü–µ—Å—Å—ã...${NC}"

# PM2 –ø—Ä–æ—Ü–µ—Å—Å—ã
PM2_STATUS=$(sudo -u studx pm2 list --no-color 2>/dev/null | grep "studx-backend" | awk '{print $18}' || echo "stopped")
if [ "$PM2_STATUS" != "online" ]; then
    echo -e "${RED}‚úó Backend –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!${NC}"
    send_alert "Backend –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!" "CRITICAL"
    
    # –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
    sudo -u studx pm2 restart studx-backend
    sleep 3
    send_alert "Backend –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏" "INFO"
else
    echo -e "${GREEN}‚úì Backend —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
fi

# PostgreSQL
if ! systemctl is-active --quiet postgresql; then
    echo -e "${RED}‚úó PostgreSQL –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!${NC}"
    send_alert "PostgreSQL –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!" "CRITICAL"
    sudo systemctl restart postgresql
else
    echo -e "${GREEN}‚úì PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
fi

# Redis
if ! systemctl is-active --quiet redis-server; then
    echo -e "${YELLOW}‚ö† Redis –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
    send_alert "Redis –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç" "WARNING"
    sudo systemctl restart redis-server
else
    echo -e "${GREEN}‚úì Redis —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
fi

# Nginx
if ! systemctl is-active --quiet nginx; then
    echo -e "${RED}‚úó Nginx –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!${NC}"
    send_alert "Nginx –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!" "CRITICAL"
    sudo systemctl restart nginx
else
    echo -e "${GREEN}‚úì Nginx —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
fi

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
echo -e "${YELLOW}‚Üí –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ—Å—É—Ä—Å—ã...${NC}"

# CPU
CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | awk '{print int($2)}')
if [ "$CPU_USAGE" -gt "$CPU_THRESHOLD" ]; then
    echo -e "${YELLOW}‚ö† –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: ${CPU_USAGE}%${NC}"
    send_alert "–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: ${CPU_USAGE}%" "WARNING"
else
    echo -e "${GREEN}‚úì CPU: ${CPU_USAGE}%${NC}"
fi

# –ü–∞–º—è—Ç—å
MEM_USAGE=$(free | grep Mem | awk '{print int($3/$2 * 100)}')
if [ "$MEM_USAGE" -gt "$MEM_THRESHOLD" ]; then
    echo -e "${YELLOW}‚ö† –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${MEM_USAGE}%${NC}"
    send_alert "–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${MEM_USAGE}%" "WARNING"
    
    # –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞
    sync && echo 3 > /proc/sys/vm/drop_caches
else
    echo -e "${GREEN}‚úì –ü–∞–º—è—Ç—å: ${MEM_USAGE}%${NC}"
fi

# –î–∏—Å–∫
DISK_USAGE=$(df -h / | awk 'NR==2 {print int($5)}')
if [ "$DISK_USAGE" -gt "$DISK_THRESHOLD" ]; then
    echo -e "${RED}‚úó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏—Å–∫–∞: ${DISK_USAGE}%${NC}"
    send_alert "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏—Å–∫–∞: ${DISK_USAGE}%" "CRITICAL"
    
    # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞
    echo -e "${YELLOW}‚Üí –û—á–∏—â–∞—é —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...${NC}"
    find /var/log -type f -name "*.log" -mtime +30 -delete 2>/dev/null || true
    find /tmp -type f -mtime +7 -delete 2>/dev/null || true
    find /var/www/studx/releases -maxdepth 1 -type d -mtime +30 -exec rm -rf {} \; 2>/dev/null || true
    journalctl --vacuum-time=7d 2>/dev/null || true
else
    echo -e "${GREEN}‚úì –î–∏—Å–∫: ${DISK_USAGE}%${NC}"
fi

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
echo -e "${YELLOW}‚Üí –ü—Ä–æ–≤–µ—Ä—è—é SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç...${NC}"
SSL_EXPIRY=$(echo | openssl s_client -servername studx.ru -connect studx.ru:443 2>/dev/null | openssl x509 -noout -enddate 2>/dev/null | cut -d= -f2)
if [ ! -z "$SSL_EXPIRY" ]; then
    SSL_EXPIRY_EPOCH=$(date -d "$SSL_EXPIRY" +%s)
    CURRENT_EPOCH=$(date +%s)
    DAYS_LEFT=$(( ($SSL_EXPIRY_EPOCH - $CURRENT_EPOCH) / 86400 ))
    
    if [ "$DAYS_LEFT" -lt 7 ]; then
        echo -e "${RED}‚úó SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ $DAYS_LEFT –¥–Ω–µ–π!${NC}"
        send_alert "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ $DAYS_LEFT –¥–Ω–µ–π!" "CRITICAL"
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        certbot renew --quiet
    elif [ "$DAYS_LEFT" -lt 30 ]; then
        echo -e "${YELLOW}‚ö† SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ $DAYS_LEFT –¥–Ω–µ–π${NC}"
        send_alert "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ $DAYS_LEFT –¥–Ω–µ–π" "WARNING"
    else
        echo -e "${GREEN}‚úì SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â–µ $DAYS_LEFT –¥–Ω–µ–π${NC}"
    fi
fi

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ç–∫–∞–ø–æ–≤
echo -e "${YELLOW}‚Üí –ü—Ä–æ–≤–µ—Ä—è—é –±—ç–∫–∞–ø—ã...${NC}"
LAST_BACKUP=$(find /var/backups/studx -type f -name "*.gz" -mtime -1 2>/dev/null | wc -l)
if [ "$LAST_BACKUP" -eq 0 ]; then
    echo -e "${YELLOW}‚ö† –ù–µ—Ç —Å–≤–µ–∂–∏—Ö –±—ç–∫–∞–ø–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞${NC}"
    send_alert "–ù–µ—Ç —Å–≤–µ–∂–∏—Ö –±—ç–∫–∞–ø–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞" "WARNING"
else
    echo -e "${GREEN}‚úì –ù–∞–π–¥–µ–Ω–æ $LAST_BACKUP —Å–≤–µ–∂–∏—Ö –±—ç–∫–∞–ø–æ–≤${NC}"
fi

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á (Redis)
echo -e "${YELLOW}‚Üí –ü—Ä–æ–≤–µ—Ä—è—é –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á...${NC}"
QUEUE_SIZE=$(redis-cli -a "$REDIS_PASSWORD" llen studx:queue 2>/dev/null || echo "0")
if [ "$QUEUE_SIZE" -gt 100 ]; then
    echo -e "${YELLOW}‚ö† –ë–æ–ª—å—à–∞—è –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á: $QUEUE_SIZE${NC}"
    send_alert "–ë–æ–ª—å—à–∞—è –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á: $QUEUE_SIZE" "WARNING"
else
    echo -e "${GREEN}‚úì –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á: $QUEUE_SIZE${NC}"
fi

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
echo "{
  \"timestamp\": \"$(date -Iseconds)\",
  \"http_code\": \"$HTTP_CODE\",
  \"response_time\": \"$RESPONSE_TIME\",
  \"cpu_usage\": \"$CPU_USAGE\",
  \"mem_usage\": \"$MEM_USAGE\",
  \"disk_usage\": \"$DISK_USAGE\",
  \"ssl_days_left\": \"$DAYS_LEFT\",
  \"queue_size\": \"$QUEUE_SIZE\"
}" > "$STATE_FILE"

echo -e "${GREEN}[$(date)] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω${NC}"
