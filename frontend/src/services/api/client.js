// –ë–∞–∑–æ–≤—ã–π HTTP –∫–ª–∏–µ–Ω—Ç —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
import axios from 'axios';

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ axios —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
const apiClient = axios.create({
  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Retry –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const MAX_RETRIES = 3;
const RETRY_DELAY = 1000; // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ ms

// –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// Request interceptor –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
apiClient.interceptors.request.use(
  (config) => {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
    const token = localStorage.getItem('auth_token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ dev —Ä–µ–∂–∏–º–µ
    if (process.env.NODE_ENV === 'development') {
      console.log(`üì§ ${config.method?.toUpperCase()} ${config.url}`, config.data);
    }
    
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor —Å retry –ª–æ–≥–∏–∫–æ–π
apiClient.interceptors.response.use(
  (response) => {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ dev
    if (process.env.NODE_ENV === 'development') {
      console.log(`üì• ${response.config.method?.toUpperCase()} ${response.config.url}`, response.data);
    }
    return response.data;
  },
  async (error) => {
    const config = error.config;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
    if (!config || !config.retry) {
      config.retry = 0;
    }
    
    // –£—Å–ª–æ–≤–∏—è –¥–ª—è retry
    const shouldRetry = 
      config.retry < MAX_RETRIES &&
      (error.code === 'ECONNABORTED' || // Timeout
       error.code === 'ERR_NETWORK' || // Network error
       (error.response?.status >= 500 && error.response?.status <= 599)); // Server errors
    
    if (shouldRetry) {
      config.retry++;
      
      // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1s, 2s, 4s
      const retryDelay = RETRY_DELAY * Math.pow(2, config.retry - 1);
      
      console.warn(`‚ö†Ô∏è Retry ${config.retry}/${MAX_RETRIES} after ${retryDelay}ms`);
      await delay(retryDelay);
      
      return apiClient(config);
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    const errorMessage = error.response?.data?.message || error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    console.error(`‚ùå ${error.config?.method?.toUpperCase()} ${error.config?.url}: ${errorMessage}`);
    
    return Promise.reject({
      message: errorMessage,
      status: error.response?.status,
      data: error.response?.data
    });
  }
);

export default apiClient;